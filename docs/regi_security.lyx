#LyX 2.0.0beta4 created this file. For more info see http://www.lyx.org/
\lyxformat 412
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
REGI Security
\end_layout

\begin_layout Author
Jack Desert
\end_layout

\begin_layout Abstract
This paper is designed to lay out exactly what security measures are in
 place on the REGI site, that they may be reviewed to make sure security
 and confidentiality are adequate and appropriate.
\end_layout

\begin_layout Abstract
Largely the information is confidential more than it is private.
 There are no credit cards used in REGI.
 However, certain sensitive personal information exists and it seems important
 to protect the confidentiality of user information, except to provide it
 to the leaders of the trips the user participates in, often for the safety
 and comfort of all involved.
 
\end_layout

\begin_layout Section
Password Authentication
\end_layout

\begin_layout Standard
The REGI database has a user_password field as well as a user_passhash field.
 The user_password field will soon be deprecated once the user_passhash
 field goes live with version 0.53.
 (Currently in use is version 0.50 which has the option of emailing the password
 to the user in plain text.
 Also, anybody with access to the database can read everyone's passwords
 and try them on various sites around the web.) 
\end_layout

\begin_layout Standard
The user_passhash that is stored in the database is a salted hash of the
 password given by the user.
 A ten-character random salt is appended the the user_password before it
 is hashed using the sha1 algorithm.
 The hashed value (40 characters in length) as well as the salt value are
 stored together in the field called user_passhash.
 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
function UTILgenhash($plainText) { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
$salt = substr(md5(uniqid(rand(), true)), 0, SALT_LENGTH); 
\end_layout

\begin_layout LyX-Code
return $salt .
 sha1($salt .
 $plainText); 
\end_layout

\end_deeper
\begin_layout LyX-Code
} 
\end_layout

\begin_layout Standard
To check the password, the reverse happens.
 The 10-character salt is read from the database.
 The sha1 has is created of salt+password.
 If that hash matches the last 40 characters from the user_passhash, authenticat
ion is confirmed.
 
\end_layout

\begin_layout LyX-Code
define('SALT_LENGTH', 10);
\end_layout

\begin_layout LyX-Code
function UTILcheckhash($plainText, $stored) { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
$hash_40 = substr($stored, SALT_LENGTH); 
\end_layout

\begin_layout LyX-Code
$salt = substr($stored, 0, SALT_LENGTH); 
\end_layout

\begin_layout LyX-Code
$new_hash = sha1($salt .
 $plainText); 
\end_layout

\begin_layout LyX-Code
if ($hash_40 == $new_hash) return true; 
\end_layout

\begin_layout LyX-Code
else return false; 
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Section
Cookies
\end_layout

\begin_layout Standard
In order that users not be troubled for a password every half hour, cookies
 are provided.
 Once a user authenticates once with a password, a digitally signed cookie
 is created using the HMAC algorithm that contains the plaintext username.
 The cookie is given a one-month expiration date, but it is left to the
 client (browser) to enforce this, so ther is no guarantee that the client
 will discard the cookie.
 
\end_layout

\begin_layout Section
Data Transmission
\end_layout

\begin_layout Standard
Passwords, cookies, publicly-viewable data, and confidential data are all
 transmitted in plaintext.
 This means that they can be easily sniffed.
 The confidential data can be easily sniffed by anyone with is WiFi range
 of the user.
 The breached user's passwords and/or authentication cookie could then be
 known by a third party, and that third party could gain complete access
 to whatever the breached user has access to, Sniffed cookies would provide
 access to the compromised account for at least a month, and perhaps longer
 if the third party is smart enough to tell his browser to keep them.
 In the case where a user who has ADMIN priviliges is breached, the offending
 third party could make changes to any of the trips in the database.
 
\end_layout

\begin_layout Section
Passwords
\end_layout

\begin_layout Standard
Passwords are required to be at least 6 characters in length.
 They may be of any characters, though special characters &<>'
\begin_inset Quotes erd
\end_inset

 and 
\emph on
space
\emph default
 are all escaped using $quot; for double quotes, for example.
 
\end_layout

\begin_layout Subsection
Forgotten Passwords
\end_layout

\begin_layout Standard
By typing in her email address, a user may request a link to reset her password.
 A link containing her authorization code is sent to her email.
 The authorization code is a random 50-character string.
 
\end_layout

\begin_layout Subsection
Resetting Passwords
\end_layout

\begin_layout Standard
Once a user is logged in, she may reset her password.
 She is not required to enter her new password twice.
 She is not required to enter her old password.
 
\end_layout

\begin_layout Subsection
Registration Status
\end_layout

\begin_layout Standard
There are three registration statuses for a trip.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Submitted: User has registered, but cannot view participant info field (usually
 contains directions to trailhead).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Canceled: User is not approved.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Approved: User is accepted into the trip.
 User may view the carpooling information of other participants.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Leader/Coleader/Registrar: User may assign registration statuses to other
 users for THIS TRIP ONLY.
 May also change details about THIS TRIP ONLY.
\end_layout

\begin_layout Subsection
User Type
\end_layout

\begin_layout Standard
There are three user types.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
USER may only view and edit her own registration information for a trip.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
LEADER Has all permissions of USER, but can also create new trips.
 By creating a new trip, she automatically acquires Leader registration
 status for that trip.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ADMIN This is the superuser of registration status.
 This user type can do anyhing a Leader/Coleader/Registrar can do for a
 trip, except that for an ADMIN these privileges extend to any trips within
 the system.
 And generally, people with ADMIN privileges also have direct access to
 the database vi PHPMyAdmin, allowing them to view and edit anything that
 is in the database.
 
\end_layout

\begin_layout Section
Script Injection
\end_layout

\begin_layout Standard
All text-entry fields in REGI have all html special characters stripped
 using PHP's htmlspecialchars() function before being inserted into the
 database.
 And in most cases, they are displayed on the website in encoded form.
 However, there are three places on the REGI site where these data are decoded
 before being printed to the page:
\end_layout

\begin_layout Itemize
Participant Info field 
\end_layout

\begin_layout Itemize
Confirmation Page
\end_layout

\begin_layout Itemize
Roster Export (Excel or tab-delimited format)
\end_layout

\begin_layout Standard
The purpose of allowing html decoding of the first two is so that PayPal
 links may be embedded into these pages.
 The purpose of allowing html decoding of the Roster Export is because Excel
 and tab-delimited files don't know how to display things like &quot;.
 
\end_layout

\begin_layout Standard
One side effect of allowing Participant Info and Confirmation Page to display
 raw html tags is that a savvy user could add fancy formatting, like <br><b><i><
ul>, in her entry.
 One problem with this is that any unclosed tags will affect our footer
 at the bottom of the page.
 
\end_layout

\begin_layout Section
Data Backups
\end_layout

\begin_layout Standard
Currently no nightly backups are being made of the REGI database.
 
\end_layout

\begin_layout Section
Bots
\end_layout

\begin_layout Standard
No captchas are used on the site.
 Valid email addresses are not required to create accounts.
 No time delay is enforced between login attempts.
 No limit is placed on how many login attempts a user may try.
 
\end_layout

\end_body
\end_document
